#!/bin/bash
# Super-agents - THE main command for local AET setup per directory

set -e

# Get the directory where this script is located
# When installed globally, we need to find the source directory
if [[ "${BASH_SOURCE[0]}" == "/usr/local/bin/super-agents" ]]; then
    # Script is installed globally, need to find the source
    SCRIPT_DIR="$(pwd)"
    # Look for .claude/system in common locations
    for possible_dir in "$HOME/super-agents" "$HOME/claude-super-agents" "$(pwd)"; do
        if [ -d "$possible_dir/.claude/system" ]; then
            SCRIPT_DIR="$possible_dir"
            break
        fi
    done
else
    # Script is being run from source directory
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi
PROJECT_DIR="$(pwd)"
CLAUDE_DIR="$PROJECT_DIR/.claude"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to setup local AET
setup_local_aet() {
    echo -e "${GREEN}ðŸš€ Setting up AET system in $PROJECT_DIR${NC}"
    
    # Initialize AET if needed
    if [ ! -d "$CLAUDE_DIR/agents" ]; then
        echo "Initializing AET agents..."
        # Copy agent definitions from the script directory
        if [ -d "$SCRIPT_DIR/.claude/agents" ]; then
            mkdir -p "$CLAUDE_DIR"
            cp -r "$SCRIPT_DIR/.claude/agents" "$CLAUDE_DIR/"
            echo -e "${GREEN}âœ“${NC} Copied agent definitions"
        else
            echo -e "${YELLOW}Creating basic agent structure...${NC}"
            mkdir -p "$CLAUDE_DIR/agents"
            # Create a basic agent definition
            cat > "$CLAUDE_DIR/agents/developer-agent.md" <<'EOF'
# Developer Agent
Code implementation specialist
EOF
        fi
    else
        echo -e "${GREEN}âœ“${NC} AET agents already initialized"
    fi
    
    # Setup local KM server
    setup_km_server
    
    # Create local MCP bridge
    create_mcp_bridge
    
    # Setup status checker
    create_status_checker
    
    # Update CLAUDE.md
    update_claude_md
    
    echo -e "\n${GREEN}âœ… AET system ready!${NC}"
    echo -e "Run '${YELLOW}super-agents status${NC}' to check system health"
}

# Function to setup KM server
setup_km_server() {
    echo "Setting up local Knowledge Manager..."
    
    # Find available port
    PORT=5002
    while lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; do
        PORT=$((PORT + 1))
    done
    
    mkdir -p "$CLAUDE_DIR/km_server"
    echo $PORT > "$CLAUDE_DIR/km_server/port"
    
    # Create embedded KM server
    cat > "$CLAUDE_DIR/km_server/km_server.py" <<'EOF'
#!/usr/bin/env python3
import json
import sqlite3
import hashlib
import time
import os
import argparse
from flask import Flask, request, jsonify
from pathlib import Path
from typing import Dict, List, Optional

app = Flask(__name__)

class KnowledgeManager:
    def __init__(self, db_path: str = "data/knowledge.db"):
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self.conn = sqlite3.connect(str(self.db_path), check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self._initialize_db()
    
    def _initialize_db(self):
        """Create knowledge tables."""
        self.conn.executescript("""
            CREATE TABLE IF NOT EXISTS knowledge_items (
                item_id INTEGER PRIMARY KEY AUTOINCREMENT,
                ticket_id TEXT NOT NULL,
                item_type TEXT NOT NULL,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                content_hash TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS search_history (
                search_id INTEGER PRIMARY KEY AUTOINCREMENT,
                query TEXT NOT NULL,
                results_count INTEGER,
                search_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        self.conn.commit()
    
    def search_knowledge(self, query: str, limit: int = 10) -> List[Dict]:
        """Simple text search in knowledge base."""
        cursor = self.conn.execute("""
            SELECT * FROM knowledge_items 
            WHERE content LIKE ? OR title LIKE ?
            ORDER BY updated_at DESC
            LIMIT ?
        """, (f"%{query}%", f"%{query}%", limit))
        
        results = [dict(row) for row in cursor.fetchall()]
        
        # Log search
        self.conn.execute("""
            INSERT INTO search_history (query, results_count)
            VALUES (?, ?)
        """, (query, len(results)))
        self.conn.commit()
        
        return results
    
    def add_knowledge(self, ticket_id: str, item_type: str, title: str, content: str) -> int:
        """Add knowledge item."""
        content_hash = hashlib.md5(content.encode()).hexdigest()
        
        cursor = self.conn.execute("""
            INSERT INTO knowledge_items (ticket_id, item_type, title, content, content_hash)
            VALUES (?, ?, ?, ?, ?)
        """, (ticket_id, item_type, title, content, content_hash))
        
        self.conn.commit()
        return cursor.lastrowid

# Global KM instance
km = KnowledgeManager()

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "service": "knowledge-manager"})

@app.route('/mcp/spec')
def mcp_spec():
    return jsonify({
        "tools": [
            {
                "name": "search_knowledge",
                "description": "Search the knowledge base for relevant information",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {"type": "string", "description": "Search query"},
                        "limit": {"type": "integer", "default": 10}
                    },
                    "required": ["query"]
                }
            },
            {
                "name": "add_knowledge", 
                "description": "Add knowledge to the base",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "ticket_id": {"type": "string"},
                        "item_type": {"type": "string"},
                        "title": {"type": "string"},
                        "content": {"type": "string"}
                    },
                    "required": ["ticket_id", "item_type", "title", "content"]
                }
            }
        ]
    })

@app.route('/mcp', methods=['POST'])
def mcp_endpoint():
    data = request.get_json()
    method = data.get('method')
    params = data.get('params', {})
    
    try:
        if method == 'search_knowledge':
            result = km.search_knowledge(params.get('query', ''), params.get('limit', 10))
        elif method == 'add_knowledge':
            result = km.add_knowledge(
                params.get('ticket_id'),
                params.get('item_type'), 
                params.get('title'),
                params.get('content')
            )
        else:
            return jsonify({"error": f"Unknown method: {method}"}), 400
            
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', type=int, default=5002)
    parser.add_argument('--host', default='localhost')
    args = parser.parse_args()
    
    print(f"Starting Knowledge Manager on {args.host}:{args.port}")
    app.run(host=args.host, port=args.port, debug=False)
EOF
    chmod +x "$CLAUDE_DIR/km_server/km_server.py"
    echo -e "${GREEN}âœ“${NC} Created embedded KM server"
    
    # Create KM data directory
    export KM_DATA_DIR="$CLAUDE_DIR/km_server/data"
    mkdir -p "$KM_DATA_DIR"
    
    echo -e "${GREEN}âœ“${NC} Knowledge Manager configured on port $PORT"
}

# Function to create MCP bridge
create_mcp_bridge() {
    cat > "$CLAUDE_DIR/mcp_bridge.py" <<'EOF'
#!/usr/bin/env python3
import sys, json, os, requests
from typing import Dict, Any

class LocalKMBridge:
    def __init__(self):
        port_file = os.path.join(os.path.dirname(__file__), "km_server/port")
        if os.path.exists(port_file):
            with open(port_file) as f:
                self.port = int(f.read().strip())
                self.base_url = f"http://localhost:{self.port}"
                self.session = requests.Session()
        else:
            self.base_url = None
            self.session = None
    
    def handle_request(self, request: Dict[str, Any]) -> Dict[str, Any]:
        if not self.base_url:
            return {"error": {"code": -32000, "message": "No local KM server"}}
        
        method = request.get("method", "")
        
        if method == "initialize":
            return {"protocolVersion": "1.0.0", "serverName": "km-local", "capabilities": {"tools": True}}
        elif method == "tools/list":
            response = self.session.get(f"{self.base_url}/mcp/spec")
            spec = response.json()
            tools = [{"name": f"km__{t.get('tool_name', t.get('name'))}", 
                     "description": t.get("description", ""),
                     "parameters": t.get("parameters", [])} for t in spec.get("tools", [])]
            return {"tools": tools}
        elif method == "tools/call":
            params = request.get("params", {})
            tool_name = params.get("name", "").replace("km__", "")
            response = self.session.post(f"{self.base_url}/mcp",
                json={"jsonrpc": "2.0", "method": tool_name, 
                      "params": params.get("arguments", {}), "id": request.get("id")})
            result = response.json()
            return {"content": [{"type": "text", "text": json.dumps(result.get("result", result))}]}
        else:
            return {"error": {"code": -32601, "message": f"Method not found: {method}"}}
    
    def run(self):
        for line in sys.stdin:
            try:
                request = json.loads(line.strip())
                result = self.handle_request(request)
                response = {"jsonrpc": "2.0", "id": request.get("id")}
                if "error" in result:
                    response["error"] = result["error"]
                else:
                    response["result"] = result
                sys.stdout.write(json.dumps(response) + "\n")
                sys.stdout.flush()
            except Exception as e:
                sys.stderr.write(f"Error: {e}\n")
                sys.stderr.flush()

if __name__ == "__main__":
    LocalKMBridge().run()
EOF
    chmod +x "$CLAUDE_DIR/mcp_bridge.py"
    echo -e "${GREEN}âœ“${NC} MCP bridge created"
}

# Function to create status checker
create_status_checker() {
    cat > "$CLAUDE_DIR/status.sh" <<'EOF'
#!/bin/bash
echo "=== AET System Status ==="
CLAUDE_DIR="$(dirname "$0")"

# Check agents
if [ -d "$CLAUDE_DIR/agents" ]; then
    AGENT_COUNT=$(ls -1 "$CLAUDE_DIR/agents"/*.md 2>/dev/null | wc -l)
    echo "âœ“ $AGENT_COUNT agents configured"
else
    echo "âœ— No agents found"
fi

# Check KM server port
if [ -f "$CLAUDE_DIR/km_server/port" ]; then
    PORT=$(cat "$CLAUDE_DIR/km_server/port")
    echo "âœ“ Knowledge Manager configured for port $PORT"
else
    echo "âœ— Knowledge Manager not configured"
fi

# Check events
if [ -f "$CLAUDE_DIR/events/log.ndjson" ]; then
    EVENT_COUNT=$(wc -l < "$CLAUDE_DIR/events/log.ndjson")
    echo "âœ“ Event system ($EVENT_COUNT events)"
else
    echo "âœ— Event system not initialized"
fi

echo ""
echo "Project: $(pwd)"
EOF
    chmod +x "$CLAUDE_DIR/status.sh"
}

# Function to update CLAUDE.md
update_claude_md() {
    if [ ! -f "$PROJECT_DIR/CLAUDE.md" ]; then
        cat > "$PROJECT_DIR/CLAUDE.md" <<'EOF'
# Local AET System

This project has a complete local AET system in `.claude/`

## Quick Commands

- `super-agents` - Setup/verify AET system
- `super-agents status` - Check system health
- `super-agents clean` - Remove local AET

## Components

- 23 specialized agents in `.claude/agents/`
- Local Knowledge Manager in `.claude/km_server/`
- Event system in `.claude/events/`
- MCP bridge in `.claude/mcp_bridge.py`

The system runs entirely locally in this directory.
EOF
        echo -e "${GREEN}âœ“${NC} Created CLAUDE.md"
    fi
}

# Function to show status
show_status() {
    if [ -f "$CLAUDE_DIR/status.sh" ]; then
        "$CLAUDE_DIR/status.sh"
    else
        echo -e "${YELLOW}AET not initialized. Run 'super-agents' to set up.${NC}"
    fi
}

# Function to clean local AET
clean_aet() {
    echo -e "${YELLOW}Removing local AET system...${NC}"
    if [ -d "$CLAUDE_DIR" ]; then
        # Keep important files
        mv "$CLAUDE_DIR/events/log.ndjson" "$CLAUDE_DIR/events.backup.ndjson" 2>/dev/null || true
        
        # Remove AET files
        rm -rf "$CLAUDE_DIR/agents" "$CLAUDE_DIR/km_server" "$CLAUDE_DIR/mcp_bridge.py" "$CLAUDE_DIR/status.sh"
        
        echo -e "${GREEN}âœ“${NC} Local AET system removed"
        echo "Event log backed up to .claude/events.backup.ndjson"
    else
        echo "No AET system found in this directory"
    fi
}

# Function to start KM server
start_km_server() {
    if [ ! -f "$CLAUDE_DIR/km_server/port" ]; then
        echo -e "${RED}âœ— AET not configured. Run 'super-agents' first.${NC}"
        exit 1
    fi
    
    PORT=$(cat "$CLAUDE_DIR/km_server/port")
    
    # Check if already running
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${GREEN}âœ“${NC} KM server already running on port $PORT"
        return 0
    fi
    
    echo -e "${GREEN}Starting Knowledge Manager on port $PORT...${NC}"
    
    # Set KM data directory
    export KM_DATA_DIR="$CLAUDE_DIR/km_server/data"
    mkdir -p "$KM_DATA_DIR"
    
    # Start local KM server
    if [ -f "$CLAUDE_DIR/km_server/km_server.py" ]; then
        cd "$CLAUDE_DIR/km_server"
        python3 km_server.py --port $PORT > server.log 2>&1 &
        KM_PID=$!
        echo $KM_PID > pid
        cd - > /dev/null
        
        # Wait for server to start
        for i in {1..10}; do
            if curl -s "http://localhost:$PORT/health" >/dev/null 2>&1; then
                echo -e "${GREEN}âœ“${NC} Knowledge Manager started (PID: $KM_PID)"
                echo -e "Logs: $CLAUDE_DIR/km_server/server.log"
                return 0
            fi
            sleep 0.5
        done
        
        echo -e "${RED}âœ— Server failed to start. Check logs: $CLAUDE_DIR/km_server/server.log${NC}"
        exit 1
    else
        echo -e "${RED}âœ— Local KM server not found. Run 'super-agents' to set it up first.${NC}"
        exit 1
    fi
}

# Function to stop KM server
stop_km_server() {
    if [ -f "$CLAUDE_DIR/km_server/pid" ]; then
        PID=$(cat "$CLAUDE_DIR/km_server/pid")
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            rm "$CLAUDE_DIR/km_server/pid"
            echo -e "${GREEN}âœ“${NC} Stopped KM server (PID: $PID)"
        else
            echo -e "${YELLOW}Server not running (stale PID file)${NC}"
            rm "$CLAUDE_DIR/km_server/pid"
        fi
    else
        echo "No KM server running in this directory"
    fi
}

# Main command handling
case "${1:-setup}" in
    setup|init|"")
        setup_local_aet
        ;;
    start)
        start_km_server
        ;;
    stop)
        stop_km_server
        ;;
    restart)
        stop_km_server
        sleep 1
        start_km_server
        ;;
    status)
        show_status
        ;;
    clean|remove)
        clean_aet
        ;;
    help|--help|-h)
        echo "super-agents - Local AET system manager"
        echo ""
        echo "Usage:"
        echo "  super-agents [command]"
        echo ""
        echo "Commands:"
        echo "  setup    Initialize AET in current directory (default)"
        echo "  start    Start the KM server for this directory"
        echo "  stop     Stop the KM server"
        echo "  restart  Restart the KM server"
        echo "  status   Show AET system status"
        echo "  clean    Remove local AET system"
        echo "  help     Show this help message"
        echo ""
        echo "Each directory gets its own isolated AET system."
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Run 'super-agents help' for usage"
        exit 1
        ;;
esac